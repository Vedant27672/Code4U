class Solution {
public:
    string repeatLimitedString(string s, int repeatLimit) {
        int n = s.length();
        priority_queue<pair<char, int>> pq;
        unordered_map<char, int> m;
        string result;

        for (int i = 0; i < n; i++) {
            m[s[i]]++;
        }

        for (auto itr : m) {
            cout << itr.first << " ";
            pq.push({itr.first, itr.second});
        }

        while (!pq.empty()) {
            char ch = pq.top().first;
            int freq = pq.top().second;
            pq.pop();

            if (freq <= repeatLimit) {
                for (int i = 0; i < freq; i++) {
                    result += ch;
                }
            } else {
                for (int i = 0; i < repeatLimit; i++) {
                    result += ch;
                }

                if (pq.empty()) {
                    break;
                }

                auto next = pq.top();
                pq.pop();
                char nextchar = next.first;
                int nextfreq = next.second;

                result += nextchar;

                if (nextfreq != 1) {
                    pq.push({nextchar, nextfreq - 1});
                }

                freq = freq - repeatLimit;
                pq.push({ch, freq});
            }
        }
        return result;
    }
};
