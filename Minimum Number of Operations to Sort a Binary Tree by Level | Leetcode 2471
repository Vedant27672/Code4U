/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minimumOperations(TreeNode* root) {
        queue <TreeNode *> q;
        int swaps = 0;

        if(root == NULL) {
            return 0;
        }

        q.push(root);

        while(!q.empty()) {
            int s = q.size();
            vector <int> temp(s);

            for(int i=0; i<s; i++) {
                TreeNode * node = q.front();
                q.pop();

                temp[i] = node->val;

                if(node->left)
                    q.push(node->left);
                if(node->right) 
                    q.push(node->right);
            }

            vector <int> sorted = temp;
            sort(sorted.begin(), sorted.end());
            map <int, int> m;
            int tsize = temp.size();

            for(int i=0; i<tsize; i++) {
                m[temp[i]] = i;
            }

            vector <int> visited(tsize, false);

            for(auto itr : m) {
                int value = itr.first;
                int index = itr.second;

                if(!visited[index]) {
                    // visited[index] = true;

                    int cycleLength = 0; 
                    if(sorted[index] != value) {
                        while(!visited[index]) {
                            visited[index] = true;
                            value = sorted[index];
                            index = m[value];
                            cycleLength++;
                        }

                        swaps += cycleLength-1;
                    }
                    else {
                        visited[index] = true;
                    }
                }
            }
        }

        return swaps;
    }
};
